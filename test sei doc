Submitted by:  chaitanya reddy nimmakayala
Consulting Firm: Siri Info Solutions
Contact Info:  925-520-5733

1.	Given the following class, write 3 methods that can be used to return an array that has no duplicates.
---The three methods are provided below in the form of solution 1,2 and 3
2.	You should define a method signature that you feel is appropriate to the problem.
Method signatures are provided below

3.	We would prefer to see three implementations (one that should take into consideration #4 below) and an explanation of what use-cases are suitable to each implementation 
Solution 1 takes #4 into consideration, solution1 is suitable if we want to make use of collections especially if the data is huge.
Solution 2 is brute force method and not as efficient as solution 1 but if the array is small we can use it
Solution 3 is using a HashTable implementation which is pretty quick.

4.	What if we need to retain the original order?
To retain the original inserting order we can use LinkedXXX collections 

5.	What are the positives and negatives of your solution?
a.	Can you implement it another way so as to avoid the negatives?
Solution 1 is the most positive,I don’t see any negatives in it.

6.	Your solution should be testable and “production ready.”
7.	Your solution should be posted to a public github repo that SEI can clone.

public class DeDup  implements Cloneable{

    public int[] randomIntegers = {1,2,34,34,25,1,45,3,26,85,4,34,86,25,43,2,1,10000,11,16,19,1,18,4,9,3,
                                   20,17,8,15,6,2,5,10,14,12,13,7,8,9,1,2,15,12,18,10,14,20,17,16,3,6,19,
                                   13,5,11,4,7,19,16,5,9,12,3,20,7,15,17,10,6,1,8,18,4,14,13,2,11};   
Solution 1 : Using a LinkedHashSet which has higher performance we can remove duplicates,preserve the insertion order.
		public static int[] eliminateDuplicates(int[] list){   
                                         LinkedSet<Integer> noDup = new LinkedHashSet<Integer>(); 
                                         noDup.add(list[0]);
                                        for (int c = 1; c < list.length-1; c++){
                                        if(!noDup.contains(list[c])){
                                          noDup.add(list[c]); 
                                         }
     }
                                       int[] noDupArray = new int[noDup.size()];
                                                   for(int i = 0; i < noDup.size(); i++){
                                                    noDupArray[i] = noDup.get(i);
                                                     System.out.println(noDup.get(i));
                                                  } 
                 return noDupArray;
}
Solution2 :  This solution uses brute force to remove duplicates using sorting and then removing dups.
public static int[] removeDuplicates(int[] input){
     Arrays.sort(input);
        int j = 0;
        int i = 1;
        //return if the array length is less than 2
        if(input.length < 2){
            return input;
        }
        while(i < input.length){
            if(input[i] == input[j]){
                i++;
            }else{
                input[++j] = input[i++];
            }   
        }
        int[] output = new int[j+1];
        for(int k=0; k<output.length; k++){
            output[k] = input[k];
        }
         
        return output;
    }

public static int[] removeDuplicatesWithDataStructure(int[] array){
      if(array.length == 0)
          return 0;
      Map myMap = new HashTable();
      for(int i = 0; i  <  array.length; i++) {
       boolean isExist = myMap.containsValue(array[i]);
       if(isExist == false)
        myMap.put("array[i]", array[i])
      }
           int[] noDup =  myMap.values().toArray();
           return noDup;
 }


    public static void main(String [] args) {
int [] solution1Array;
private int[] data = new int[randomIntegers.length];
            data =  DeDup. eliminateDuplicates(randomIntegers); // solution 1 
          System.out.println(“The sorted array with solution 1 is ” + data );
              data = DeDup.removeDuplicates(randomIntegers); // solution 2 
System.out.println(“The sorted array with solution 2 is ” + data );
                 data = DeDup.removeDuplicatesWithDataStructure(randomIntegers); // solution 3 
System.out.println(“The sorted array with solution 3 is ” + data );
              
              

    }
}

